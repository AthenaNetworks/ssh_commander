name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: [self-hosted, Linux, X64]
            platform: linux
            arch: x64
            asset_name: ssh-commander-linux-x64
            build_deb: true
            build_rpm: true
          - os: [self-hosted, Linux, X64]
            platform: linux
            arch: arm64
            asset_name: ssh-commander-linux-arm64
            cross_compile: true
          - os: macos-latest
            platform: macos
            arch: x64
            asset_name: ssh-commander-macos-x64
          - os: macos-14
            platform: macos
            arch: arm64
            asset_name: ssh-commander-macos-arm64
          - os: windows-latest
            platform: windows
            arch: x64
            asset_name: ssh-commander-windows-x64

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
       
    - name: Set up Python (non-Linux)
      if: matrix.platform != 'linux'
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Set up build environment (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3.8 python3.8-venv python3.8-dev python3-pip
        if [ "${{ matrix.cross_compile }}" = "true" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi

    - name: Install dependencies
      run: |
        if [ "${{ matrix.platform }}" = "linux" ]; then
          python3.8 -m pip install --upgrade pip
          python3.8 -m pip install -r requirements.txt
        else
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
        fi
        
    - name: Build with PyInstaller
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ "${{ matrix.platform }}" = "linux" ]; then
            python3.8 -m PyInstaller --onefile --noupx --name ${{ matrix.asset_name }} \
          else
            pyinstaller --onefile --noupx --name ${{ matrix.asset_name }} \
          fi
            --exclude-module _bootlocale \
            --exclude-module PIL \
            --exclude-module numpy \
            --exclude-module pandas \
            --exclude-module matplotlib \
            --exclude-module tkinter \
            --exclude-module unittest \
            --exclude-module email \
            --exclude-module http \
            --exclude-module html \
            --exclude-module xml \
            --exclude-module pydoc \
            ssh_commander.py
        else
          # Set target architecture based on matrix config
          if [ "${{ matrix.arch }}" = "x64" ]; then
            export ARCHFLAGS="-arch x86_64"
            TARGET_ARCH="--target-arch x86_64"
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            if [ "${{ matrix.cross_compile }}" = "true" ]; then
              export CC="aarch64-linux-gnu-gcc"
              export CXX="aarch64-linux-gnu-g++"
              export ARCHFLAGS="-arch arm64"
              TARGET_ARCH="--target-arch aarch64"
            else
              export ARCHFLAGS="-arch arm64"
              TARGET_ARCH="--target-arch arm64"
            fi
          fi
          
          python3.8 -m PyInstaller --onefile --noupx --name ${{ matrix.asset_name }} $TARGET_ARCH \
            --exclude-module _bootlocale \
            --exclude-module PIL \
            --exclude-module numpy \
            --exclude-module pandas \
            --exclude-module matplotlib \
            --exclude-module tkinter \
            --exclude-module unittest \
            --exclude-module email \
            --exclude-module http \
            --exclude-module html \
            --exclude-module xml \
            --exclude-module pydoc \
            ssh_commander.py
        fi
      shell: bash
        
    - name: Package Release (Unix)
      if: matrix.platform != 'windows'
      run: |
        # Create a clean directory for the release
        rm -rf release ssh-commander
        mkdir -p release
        
        # Create the package directory with correct name
        mkdir -p ssh-commander
        cp dist/${{ matrix.asset_name }} ssh-commander/
        cp servers.yaml.example ssh-commander/
        cp README.md ssh-commander/
        cp install.sh ssh-commander/
        
        # Create the archive
        tar -czf release/${{ matrix.asset_name }}.tar.gz ssh-commander
        
        # Cleanup
        rm -rf ssh-commander
      shell: bash

    - name: Package Release (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        # Clean up and create directories
        Remove-Item -Path release -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path release
        
        # Create package directory
        New-Item -ItemType Directory -Force -Path ssh-commander
        Copy-Item dist/${{ matrix.asset_name }}.exe ssh-commander/
        Copy-Item servers.yaml.example ssh-commander/
        Copy-Item README.md ssh-commander/
        Copy-Item install.ps1 ssh-commander/
        
        # Create archive
        Compress-Archive -Path ssh-commander -DestinationPath release/${{ matrix.asset_name }}.zip
        
        # Cleanup
        Remove-Item -Path ssh-commander -Recurse -Force

    - name: Build Debian Package
      if: matrix.build_deb
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper dh-python python3-all python3-setuptools python3-pip python3-paramiko python3-yaml python3-colorama
        
        # Fix pip permissions
        sudo chown -R $USER:$USER ~/.cache/pip
        
        # Extract version from git tag
        VERSION=${GITHUB_REF_NAME#v}
        
        # Build the package
        dpkg-buildpackage -us -uc -b
        
        # Copy the .deb file to release directory and generate checksum
        mkdir -p release
        cp ../ssh-commander_*.deb release/
        cd release
        DEB_FILE=$(ls ssh-commander_*.deb)
        sha256sum "$DEB_FILE" > "$DEB_FILE.sha256"
        cd ..

    - name: Build RPM Package
      if: matrix.build_rpm
      run: |
        # Add RPM repository and install build tools
        sudo apt-get update
        sudo apt-get install -y alien rpm
        
        # Extract version from git tag
        VERSION=${GITHUB_REF_NAME#v}
        
        # Convert .deb to .rpm using alien
        cd release
        DEB_FILE=$(ls ssh-commander_*.deb)
        sudo alien --to-rpm "$DEB_FILE"
        RPM_FILE="ssh-commander-${VERSION}.el8.x86_64.rpm"
        mv ssh-commander-*.rpm "$RPM_FILE"
        sha256sum "$RPM_FILE" > "$RPM_FILE.sha256"
        cd ..

    - name: Generate SHA256 checksums (Unix)
      if: matrix.platform != 'windows'
      run: |
        cd release
        if [ "$(uname)" = "Darwin" ]; then
          CHECKSUM_CMD="shasum -a 256"
        else
          CHECKSUM_CMD="sha256sum"
        fi
        $CHECKSUM_CMD ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
      shell: bash

    - name: Generate SHA256 checksums (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        cd release
        $hash = Get-FileHash -Algorithm SHA256 ${{ matrix.asset_name }}.zip
        "$($hash.Hash)  ${{ matrix.asset_name }}.zip" | Out-File -Encoding UTF8 ${{ matrix.asset_name }}.zip.sha256

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}-artifacts
        path: |
          release/*.tar.gz
          release/*.zip
          release/*.sha256
          release/*.deb
          release/*.rpm
        if-no-files-found: error

  create-release:
    needs: build
    runs-on: [self-hosted, Linux, X64]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
          
      - name: Create Release Notes
        run: |
          echo "# SSH Commander ${GITHUB_REF_NAME}" > release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "1. Download the appropriate archive for your platform:" >> release_notes.md
          echo "   - macOS ARM64: \`ssh-commander-macos-arm64.tar.gz\`" >> release_notes.md
          echo "   - macOS x64: \`ssh-commander-macos-x64.tar.gz\`" >> release_notes.md
          echo "   - Linux x64: \`ssh-commander-linux-x64.tar.gz\` (or \`.deb\`/\`.rpm\` packages)" >> release_notes.md
          echo "   - Linux ARM64: \`ssh-commander-linux-arm64.tar.gz\`" >> release_notes.md
          echo "   - Windows x64: \`ssh-commander-windows-x64.zip\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "   For Debian/Ubuntu systems, you can install the .deb package:" >> release_notes.md
          echo "   \`\`\`bash" >> release_notes.md
          echo "   sudo dpkg -i ssh-commander_*.deb" >> release_notes.md
          echo "   \`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "   For CentOS/RHEL systems, you can install the .rpm package:" >> release_notes.md
          echo "   \`\`\`bash" >> release_notes.md
          echo "   sudo rpm -i ssh-commander-*.rpm" >> release_notes.md
          echo "   \`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "2. Extract the archive" >> release_notes.md
          echo "3. Run the installation script:" >> release_notes.md
          echo "   For macOS/Linux:" >> release_notes.md
          echo "   \`\`\`bash" >> release_notes.md
          echo "   sudo ./install.sh" >> release_notes.md
          echo "   \`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "   For Windows (Run PowerShell as Administrator):" >> release_notes.md
          echo "   \`\`\`powershell" >> release_notes.md
          echo "   .\install.ps1" >> release_notes.md
          echo "   \`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## SHA256 Checksums" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          cat artifacts/*.sha256 >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
            artifacts/*.sha256
            artifacts/*.deb
            artifacts/*.rpm
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
